#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt {
    tapping-term-ms = <250>;
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        shift_control: shift_control {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LEFT_SHIFT>, <&kp LEFT_CONTROL>;

            label = "SHIFT_CONTROL";
        };

        tab_capslock: tab_capslock {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp TAB>, <&kp CAPSLOCK>;

            label = "TAB_CAPSLOCK";
        };

        shiftguiToggle: shiftguiToggle {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTGUITOGGLE";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&none>,
                <&kp LS(LG(NUMBER_3))>,
                <&kp LS(LG(NUMBER_4))>,
                <&kp LS(LG(N5))>,
                <&none>;
        };

        gui_gui_shiftgui: gui_gui_shiftgui {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_GUI_SHIFTGUI";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LEFT_GUI>, <&kp LS(LEFT_GUI)>;

            tapping-term-ms = <250>;
        };

        n_bt123_out: n_bt123_out {
            compatible = "zmk,behavior-tap-dance";
            label = "N_BT123_OUT";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&bt BT_SEL 0>,
                <&bt BT_SEL 1>,
                <&bt BT_SEL 2>,
                <&out OUT_USB>;
        };

        nn_shiftcmd345: nn_shiftcmd345 {
            compatible = "zmk,behavior-tap-dance";
            label = "NN_SHIFTCMD345";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&none>,
                <&kp LS(LG(NUMBER_3))>,
                <&kp LS(LG(NUMBER_4))>,
                <&kp LS(LG(N5))>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        change_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <45 42>;
            slow-release;
            require-prior-idle-ms = <600>;
            layers = <0>;
            timeout-ms = <300>;
        };
    };

    macros {
        VSC_MD: VSC_MD {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp V>;
            label = "VSC_MD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E     &kp R      &kp T                                &mmv MOVE_UP                     &kp Y  &kp U      &kp I             &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D     &kp F      &kp G                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H  &kp J      &kp K             &kp L    &kp SEMI  &kp SQT
&kp LSHIFT  &kp Z  &kp X  &kp C     &kp V      &kp B  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp N  &kp M      &kp COMMA         &kp DOT  &kp FSLH  &kp LEFT_SHIFT
                          &kp LGUI  &kp SPACE  &mo 1                                                                 &mo 2  &kp ENTER  &kp LEFT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_1 {
            display-name = "Layer1";
            bindings = <
&kp TILDE     &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                    &trans             &kp CARET      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DELETE
&kp GRAVE     &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                 &trans  &mkp RCLK  &trans  &none          &kp MINUS      &kp EQUAL     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp NON_US_BACKSLASH
&kp CAPSLOCK  &kp NUMBER_6     &kp N7        &kp N8        &kp N9        &kp N0       &trans            &trans             &none          &kp UNDER      &kp PLUS      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE
                                             &trans        &trans        &mo 1                                             &kp LG(SPACE)  &trans         &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            display-name = "Layer2";
            bindings = <
&kp LS(LG(NUMBER_3))  &kp DELETE      &kp HOME   &kp UP           &kp END      &kp BACKSPACE                       &trans             &kp CARET      &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DELETE
&kp LS(LG(NUMBER_4))  &kp TAB         &kp LEFT   &kp DOWN         &kp RIGHT    &kp LEFT_ALT                &trans  &mkp RCLK  &trans  &kp LG(EQUAL)  &kp MINUS        &kp EQUAL     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BACKSLASH
&kp LG(LS(N5))        &kp LEFT_SHIFT  &kp PG_UP  &kp DOWN_ARROW   &kp PG_DN    &kp LEFT_CONTROL  &trans            &trans             &kp LG(MINUS)  &kp UNDERSCORE   &kp PLUS      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE
                                                 &kp LC(LS(TAB))  &kp LC(TAB)  &kp LG(GRAVE)                                          &mo 2          &kp LS(LG(TAB))  &kp LG(TAB)
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
